{
  "name": "RMS Gmail Auto Quote Agent",
  "nodes": [
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "mailbox": "INBOX",
        "format": "resolved",
        "options": {
          "allowUnauthorizedCerts": false,
          "forceReconnect": false
        }
      },
      "id": "gmail-imap-trigger",
      "name": "Gmail IMAP Trigger",
      "type": "n8n-nodes-base.emailReadImap",
      "typeVersion": 2,
      "position": [240, 300],
      "credentials": {
        "imap": {
          "id": "gmail-imap-credentials",
          "name": "Gmail IMAP"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "quote-request-condition",
              "leftValue": "={{ $json.subject.toLowerCase() }}",
              "rightValue": "quote",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-quote-request",
      "name": "Check: Is Quote Request?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "jsCode": "// Parse email content to extract quote request details\nconst email = $input.first().json;\nconst subject = email.subject || '';\nconst textContent = email.text || '';\nconst htmlContent = email.html || '';\n\n// Combine text and HTML content for parsing\nconst fullContent = textContent + ' ' + htmlContent.replace(/<[^>]*>/g, ' ');\n\n// Initialize parsed data\nconst parsedData = {\n  original_email: {\n    from: email.from,\n    to: email.to,\n    subject: email.subject,\n    date: email.date,\n    message_id: email.messageId\n  },\n  customer_email: email.from,\n  customer_name: email.from.split('@')[0].replace(/[._]/g, ' '),\n  // Default values\n  pol_code: null,\n  pod_code: null,\n  container_type: null,\n  container_count: 1,\n  salesforce_opportunity_id: null,\n  salesforce_org_id: '00000000-0000-0000-0000-000000000001'\n};\n\n// Extract POL (Port of Loading) - common patterns\nconst polPatterns = [\n  /(?:from|origin|pol|loading)\\s*:?\\s*([A-Z]{5})/gi,\n  /(?:from|origin|pol|loading)\\s*:?\\s*([A-Z]{4}[A-Z0-9])/gi,\n  /(?:from|origin|pol|loading)\\s*:?\\s*([A-Z]{3}[A-Z0-9]{2})/gi\n];\n\n// Extract POD (Port of Discharge) - common patterns\nconst podPatterns = [\n  /(?:to|destination|pod|discharge)\\s*:?\\s*([A-Z]{5})/gi,\n  /(?:to|destination|pod|discharge)\\s*:?\\s*([A-Z]{4}[A-Z0-9])/gi,\n  /(?:to|destination|pod|discharge)\\s*:?\\s*([A-Z]{3}[A-Z0-9]{2})/gi\n];\n\n// Extract container type\nconst containerPatterns = [\n  /(\\d+)\\s*(?:x\\s*)?(20GP|40GP|40HC|45HC|20FT|40FT)/gi,\n  /(20GP|40GP|40HC|45HC|20FT|40FT)/gi\n];\n\n// Extract container count\nconst countPatterns = [\n  /(\\d+)\\s*(?:x\\s*)?(?:container|box|unit)/gi,\n  /(\\d+)\\s*(?:x\\s*)?(20GP|40GP|40HC|45HC|20FT|40FT)/gi\n];\n\n// Extract Salesforce Opportunity ID\nconst salesforcePatterns = [\n  /(?:opportunity|opp|sf)\\s*:?\\s*([0-9a-fA-F]{15}|[0-9a-fA-F]{18})/gi,\n  /(?:opportunity|opp|sf)\\s*:?\\s*(006[a-zA-Z0-9]{12,15})/gi\n];\n\n// Parse POL\nfor (const pattern of polPatterns) {\n  const match = pattern.exec(fullContent);\n  if (match && match[1]) {\n    parsedData.pol_code = match[1].toUpperCase();\n    break;\n  }\n}\n\n// Parse POD\nfor (const pattern of podPatterns) {\n  const match = pattern.exec(fullContent);\n  if (match && match[1]) {\n    parsedData.pod_code = match[1].toUpperCase();\n    break;\n  }\n}\n\n// Parse container type and count\nfor (const pattern of containerPatterns) {\n  const match = pattern.exec(fullContent);\n  if (match) {\n    if (match[1] && !isNaN(match[1])) {\n      parsedData.container_count = parseInt(match[1]);\n      parsedData.container_type = match[2] || match[1];\n    } else {\n      parsedData.container_type = match[1] || match[0];\n    }\n    break;\n  }\n}\n\n// Parse container count separately if not found above\nif (parsedData.container_count === 1) {\n  for (const pattern of countPatterns) {\n    const match = pattern.exec(fullContent);\n    if (match && match[1] && !isNaN(match[1])) {\n      parsedData.container_count = parseInt(match[1]);\n      break;\n    }\n  }\n}\n\n// Parse Salesforce Opportunity ID\nfor (const pattern of salesforcePatterns) {\n  const match = pattern.exec(fullContent);\n  if (match && match[1]) {\n    parsedData.salesforce_opportunity_id = match[1];\n    break;\n  }\n}\n\n// Validate required fields\nconst validation = {\n  has_pol: !!parsedData.pol_code,\n  has_pod: !!parsedData.pod_code,\n  has_container_type: !!parsedData.container_type,\n  has_valid_route: !!(parsedData.pol_code && parsedData.pod_code && parsedData.container_type)\n};\n\n// Add validation results\nparsedData.validation = validation;\nparsedData.is_valid_request = validation.has_valid_route;\n\n// Add parsing confidence score\nlet confidence = 0;\nif (validation.has_pol) confidence += 25;\nif (validation.has_pod) confidence += 25;\nif (validation.has_container_type) confidence += 25;\nif (parsedData.container_count > 1) confidence += 10;\nif (parsedData.salesforce_opportunity_id) confidence += 15;\n\nparsedData.parsing_confidence = confidence;\n\n// Add debug info\nparsedData.debug = {\n  original_content: fullContent.substring(0, 500) + '...',\n  extracted_patterns: {\n    pol_found: parsedData.pol_code,\n    pod_found: parsedData.pod_code,\n    container_found: parsedData.container_type,\n    count_found: parsedData.container_count,\n    salesforce_found: parsedData.salesforce_opportunity_id\n  }\n};\n\nreturn parsedData;"
      },
      "id": "parse-email-content",
      "name": "Parse Email Content",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 200]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "valid-request-condition",
              "leftValue": "={{ $json.is_valid_request }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "validate-parsed-data",
      "name": "Validate: Complete Request?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [900, 200]
    },
    {
      "parameters": {
        "url": "http://13.204.127.113:3000/api/auth/token",
        "authentication": "none",
        "requestMethod": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "tenant_id",
              "value": "00000000-0000-0000-0000-000000000001"
            },
            {
              "name": "user_id",
              "value": "gmail_auto_quote_system"
            }
          ]
        },
        "options": {}
      },
      "id": "get-jwt-token",
      "name": "Get JWT Token",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1120, 100]
    },
    {
      "parameters": {
        "url": "http://13.204.127.113:3000/api/prepare-quote",
        "authentication": "none",
        "requestMethod": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "Bearer {{ $('Get JWT Token').item.json.token }}"
            },
            {
              "name": "x-tenant-id",
              "value": "00000000-0000-0000-0000-000000000001"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "salesforce_org_id",
              "value": "00000000-0000-0000-0000-000000000001"
            },
            {
              "name": "pol_code",
              "value": "={{ $('Parse Email Content').item.json.pol_code }}"
            },
            {
              "name": "pod_code",
              "value": "={{ $('Parse Email Content').item.json.pod_code }}"
            },
            {
              "name": "container_type",
              "value": "={{ $('Parse Email Content').item.json.container_type }}"
            },
            {
              "name": "container_count",
              "value": "={{ $('Parse Email Content').item.json.container_count }}"
            }
          ]
        },
        "options": {}
      },
      "id": "prepare-quote-v1",
      "name": "Prepare Quote (V1 - Auto Preferred Rate)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1340, 100]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "quote-success-condition",
              "leftValue": "={{ $json.success }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-quote-success",
      "name": "Check: Quote Generated?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1560, 100]
    },
    {
      "parameters": {
        "jsCode": "// Format quote data for email response and Salesforce update\nconst quoteData = $input.first().json.data;\nconst originalRequest = $('Parse Email Content').first().json;\n\n// Extract key information\nconst route = quoteData.route;\nconst totals = quoteData.totals;\nconst oceanFreight = quoteData.quote_parts.ocean_freight;\nconst originCharges = quoteData.quote_parts.origin_charges;\nconst destCharges = quoteData.quote_parts.destination_charges;\n\n// Format for email\nconst emailData = {\n  to: originalRequest.customer_email,\n  subject: `Re: ${originalRequest.original_email.subject} - Freight Quote Ready`,\n  quote_number: `QT-${Date.now()}`,\n  customer_name: originalRequest.customer_name,\n  route_display: quoteData.quote_summary.route_display,\n  container_info: quoteData.quote_summary.container_info,\n  carrier: oceanFreight.carrier,\n  transit_days: oceanFreight.transit_days,\n  validity: oceanFreight.validity,\n  pricing: {\n    ocean_freight: totals.ocean_freight_total,\n    origin_charges: totals.origin_total_usd,\n    destination_charges: totals.destination_total_usd,\n    grand_total: totals.grand_total_usd,\n    currency: totals.currency\n  },\n  breakdown: {\n    ocean_freight_per_container: oceanFreight.all_in_freight_sell,\n    origin_charges_per_container: originCharges.total_usd,\n    destination_charges_per_container: destCharges.total_usd,\n    total_per_container: totals.grand_total_usd / route.container_count\n  },\n  charges_detail: {\n    origin: originCharges.charges.map(c => ({\n      name: c.charge_name,\n      amount: c.amount_usd,\n      currency: c.charge_currency\n    })),\n    destination: destCharges.charges.map(c => ({\n      name: c.charge_name,\n      amount: c.amount_usd,\n      currency: c.charge_currency\n    }))\n  },\n  generated_at: new Date().toISOString(),\n  valid_until: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n  original_message_id: originalRequest.original_email.message_id,\n  original_subject: originalRequest.original_email.subject\n};\n\n// Format for Salesforce update\nconst salesforceData = {\n  opportunity_id: originalRequest.salesforce_opportunity_id,\n  quote_status: 'Generated',\n  quote_number: emailData.quote_number,\n  total_amount: totals.grand_total_usd,\n  currency: totals.currency,\n  carrier: oceanFreight.carrier,\n  transit_days: oceanFreight.transit_days,\n  quote_valid_until: emailData.valid_until,\n  quote_generated_at: emailData.generated_at,\n  route_pol: route.pol,\n  route_pod: route.pod,\n  container_type: route.container_type,\n  container_count: route.container_count,\n  pricing_breakdown: {\n    ocean_freight: totals.ocean_freight_total,\n    origin_charges: totals.origin_total_usd,\n    destination_charges: totals.destination_total_usd\n  },\n  email_triggered: true,\n  original_email_from: originalRequest.customer_email\n};\n\nreturn {\n  email_data: emailData,\n  salesforce_data: salesforceData,\n  original_quote: quoteData,\n  original_request: originalRequest\n};"
      },
      "id": "format-quote-data",
      "name": "Format Quote Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1780, 0]
    },
    {
      "parameters": {
        "fromEmail": "quotes@yourcompany.com",
        "toEmail": "={{ $json.email_data.to }}",
        "subject": "={{ $json.email_data.subject }}",
        "emailType": "html",
        "message": "<!DOCTYPE html>\n<html>\n<head>\n    <style>\n        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }\n        .header { background-color: #2c3e50; color: white; padding: 20px; text-align: center; }\n        .content { padding: 20px; }\n        .quote-box { border: 2px solid #3498db; border-radius: 8px; padding: 20px; margin: 20px 0; background-color: #f8f9fa; }\n        .pricing-table { width: 100%; border-collapse: collapse; margin: 20px 0; }\n        .pricing-table th, .pricing-table td { border: 1px solid #ddd; padding: 12px; text-align: left; }\n        .pricing-table th { background-color: #3498db; color: white; }\n        .total-row { font-weight: bold; background-color: #e8f4fd; }\n        .footer { background-color: #34495e; color: white; padding: 15px; text-align: center; font-size: 12px; }\n        .highlight { color: #e74c3c; font-weight: bold; }\n        .auto-generated { background-color: #e8f5e8; padding: 10px; border-left: 4px solid #27ae60; margin: 10px 0; }\n    </style>\n</head>\n<body>\n    <div class=\"header\">\n        <h1>🚢 Automated Freight Quote</h1>\n        <p>Quote #{{ $json.email_data.quote_number }}</p>\n    </div>\n    \n    <div class=\"content\">\n        <div class=\"auto-generated\">\n            <strong>🤖 Auto-Generated Quote:</strong> This quote was automatically generated from your email request.\n        </div>\n        \n        <p>Dear {{ $json.email_data.customer_name }},</p>\n        \n        <p>Thank you for your freight inquiry. Please find below our competitive quote for your shipment:</p>\n        \n        <div class=\"quote-box\">\n            <h2>Route Information</h2>\n            <p><strong>Route:</strong> {{ $json.email_data.route_display }}</p>\n            <p><strong>Container:</strong> {{ $json.email_data.container_info }}</p>\n            <p><strong>Carrier:</strong> {{ $json.email_data.carrier }}</p>\n            <p><strong>Transit Time:</strong> {{ $json.email_data.transit_days }} days</p>\n            <p><strong>Validity:</strong> {{ $json.email_data.validity.from }} to {{ $json.email_data.validity.to }}</p>\n        </div>\n        \n        <h2>Pricing Breakdown</h2>\n        <table class=\"pricing-table\">\n            <thead>\n                <tr>\n                    <th>Description</th>\n                    <th>Per Container</th>\n                    <th>Total ({{ $json.email_data.pricing.currency }})</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr>\n                    <td>Ocean Freight</td>\n                    <td>${{ $json.email_data.breakdown.ocean_freight_per_container.toFixed(2) }}</td>\n                    <td>${{ $json.email_data.pricing.ocean_freight.toFixed(2) }}</td>\n                </tr>\n                <tr>\n                    <td>Origin Charges</td>\n                    <td>${{ $json.email_data.breakdown.origin_charges_per_container.toFixed(2) }}</td>\n                    <td>${{ $json.email_data.pricing.origin_charges.toFixed(2) }}</td>\n                </tr>\n                <tr>\n                    <td>Destination Charges</td>\n                    <td>${{ $json.email_data.breakdown.destination_charges_per_container.toFixed(2) }}</td>\n                    <td>${{ $json.email_data.pricing.destination_charges.toFixed(2) }}</td>\n                </tr>\n                <tr class=\"total-row\">\n                    <td><strong>GRAND TOTAL</strong></td>\n                    <td><strong>${{ $json.email_data.breakdown.total_per_container.toFixed(2) }}</strong></td>\n                    <td><strong class=\"highlight\">${{ $json.email_data.pricing.grand_total.toFixed(2) }}</strong></td>\n                </tr>\n            </tbody>\n        </table>\n        \n        <h3>Charge Details</h3>\n        <p><strong>Origin Charges:</strong></p>\n        <ul>\n            {{ $json.email_data.charges_detail.origin.map(c => `<li>${c.name}: $${c.amount.toFixed(2)} ${c.currency}</li>`).join('') }}\n        </ul>\n        \n        <p><strong>Destination Charges:</strong></p>\n        <ul>\n            {{ $json.email_data.charges_detail.destination.map(c => `<li>${c.name}: $${c.amount.toFixed(2)} ${c.currency}</li>`).join('') }}\n        </ul>\n        \n        <div class=\"quote-box\">\n            <p><strong>Quote Valid Until:</strong> {{ $json.email_data.valid_until }}</p>\n            <p><strong>Generated:</strong> {{ new Date($json.email_data.generated_at).toLocaleString() }}</p>\n        </div>\n        \n        <p>This quote is based on current market rates and is valid for 7 days from the date of issue. Please contact us to confirm your booking or if you have any questions.</p>\n        \n        <p>Best regards,<br>\n        Your Freight Team</p>\n    </div>\n    \n    <div class=\"footer\">\n        <p>This is an automated quote generated by our RMS system. For questions, please contact our sales team.</p>\n    </div>\n</body>\n</html>",
        "options": {}
      },
      "id": "send-quote-email",
      "name": "Send Quote Email Reply",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2.1,
      "position": [2000, 0]
    },
    {
      "parameters": {
        "url": "https://login.salesforce.com/services/oauth2/token",
        "authentication": "none",
        "requestMethod": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/x-www-form-urlencoded"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "grant_type",
              "value": "password"
            },
            {
              "name": "client_id",
              "value": "YOUR_SALESFORCE_CLIENT_ID"
            },
            {
              "name": "client_secret",
              "value": "YOUR_SALESFORCE_CLIENT_SECRET"
            },
            {
              "name": "username",
              "value": "YOUR_SALESFORCE_USERNAME"
            },
            {
              "name": "password",
              "value": "YOUR_SALESFORCE_PASSWORD_AND_SECURITY_TOKEN"
            }
          ]
        },
        "options": {}
      },
      "id": "get-salesforce-token",
      "name": "Get Salesforce Token",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1780, 100]
    },
    {
      "parameters": {
        "url": "https://yourcompany.my.salesforce.com/services/data/v58.0/sobjects/Opportunity/{{ $json.salesforce_data.opportunity_id }}",
        "authentication": "none",
        "requestMethod": "PATCH",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{ $('Get Salesforce Token').item.json.access_token }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "Quote_Status__c",
              "value": "={{ $json.salesforce_data.quote_status }}"
            },
            {
              "name": "Quote_Number__c",
              "value": "={{ $json.salesforce_data.quote_number }}"
            },
            {
              "name": "Total_Amount__c",
              "value": "={{ $json.salesforce_data.total_amount }}"
            },
            {
              "name": "Currency__c",
              "value": "={{ $json.salesforce_data.currency }}"
            },
            {
              "name": "Carrier__c",
              "value": "={{ $json.salesforce_data.carrier }}"
            },
            {
              "name": "Transit_Days__c",
              "value": "={{ $json.salesforce_data.transit_days }}"
            },
            {
              "name": "Quote_Valid_Until__c",
              "value": "={{ $json.salesforce_data.quote_valid_until }}"
            },
            {
              "name": "Quote_Generated_At__c",
              "value": "={{ $json.salesforce_data.quote_generated_at }}"
            },
            {
              "name": "Email_Triggered__c",
              "value": "={{ $json.salesforce_data.email_triggered }}"
            },
            {
              "name": "Original_Email_From__c",
              "value": "={{ $json.salesforce_data.original_email_from }}"
            }
          ]
        },
        "options": {}
      },
      "id": "update-salesforce",
      "name": "Update Salesforce Opportunity",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [2000, 100]
    },
    {
      "parameters": {
        "fromEmail": "quotes@yourcompany.com",
        "toEmail": "={{ $json.customer_email }}",
        "subject": "Re: {{ $json.original_email.subject }} - Quote Request Needs More Information",
        "emailType": "html",
        "message": "<!DOCTYPE html>\n<html>\n<head>\n    <style>\n        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }\n        .header { background-color: #e74c3c; color: white; padding: 20px; text-align: center; }\n        .content { padding: 20px; }\n        .info-box { border: 2px solid #f39c12; border-radius: 8px; padding: 20px; margin: 20px 0; background-color: #fef9e7; }\n        .required-info { background-color: #e8f4fd; padding: 15px; border-left: 4px solid #3498db; margin: 10px 0; }\n        .footer { background-color: #34495e; color: white; padding: 15px; text-align: center; font-size: 12px; }\n    </style>\n</head>\n<body>\n    <div class=\"header\">\n        <h1>📧 Quote Request - Additional Information Needed</h1>\n    </div>\n    \n    <div class=\"content\">\n        <p>Dear {{ $json.customer_name }},</p>\n        \n        <p>Thank you for your quote request. I've received your email, but I need some additional information to provide you with an accurate freight quote.</p>\n        \n        <div class=\"info-box\">\n            <h2>📋 Information I Found:</h2>\n            <ul>\n                <li><strong>POL (Port of Loading):</strong> {{ $json.pol_code || 'Not specified' }}</li>\n                <li><strong>POD (Port of Discharge):</strong> {{ $json.pod_code || 'Not specified' }}</li>\n                <li><strong>Container Type:</strong> {{ $json.container_type || 'Not specified' }}</li>\n                <li><strong>Container Count:</strong> {{ $json.container_count || 'Not specified' }}</li>\n                <li><strong>Salesforce Opportunity:</strong> {{ $json.salesforce_opportunity_id || 'Not specified' }}</li>\n            </ul>\n            \n            <p><strong>Parsing Confidence:</strong> {{ $json.parsing_confidence }}%</p>\n        </div>\n        \n        <div class=\"required-info\">\n            <h3>🔍 Please provide the following information:</h3>\n            <ul>\n                <li><strong>Origin Port (POL):</strong> e.g., INNSA, USLAX, DEHAM</li>\n                <li><strong>Destination Port (POD):</strong> e.g., NLRTM, USNYC, CNTSN</li>\n                <li><strong>Container Type:</strong> e.g., 20GP, 40GP, 40HC, 45HC</li>\n                <li><strong>Number of Containers:</strong> e.g., 1, 2, 5</li>\n                <li><strong>Optional - Salesforce Opportunity ID:</strong> if you have one</li>\n            </ul>\n        </div>\n        \n        <p><strong>Example format:</strong></p>\n        <blockquote style=\"background-color: #f8f9fa; padding: 15px; border-left: 4px solid #6c757d;\">\n            <p>Hi, I need a quote for:</p>\n            <p>From: INNSA<br>\n            To: NLRTM<br>\n            Container: 2x 40HC<br>\n            Opportunity: 0061234567890ABC</p>\n        </blockquote>\n        \n        <p>Once you provide this information, I'll generate your quote automatically!</p>\n        \n        <p>Best regards,<br>\n        Your Freight Team</p>\n    </div>\n    \n    <div class=\"footer\">\n        <p>This is an automated response from our RMS system. For immediate assistance, please contact our sales team.</p>\n    </div>\n</body>\n</html>",
        "options": {}
      },
      "id": "send-info-request-email",
      "name": "Send Info Request Email",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2.1,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "fromEmail": "quotes@yourcompany.com",
        "toEmail": "={{ $json.customer_email }}",
        "subject": "Re: {{ $json.original_email.subject }} - Not a Quote Request",
        "emailType": "html",
        "message": "<!DOCTYPE html>\n<html>\n<head>\n    <style>\n        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }\n        .header { background-color: #95a5a6; color: white; padding: 20px; text-align: center; }\n        .content { padding: 20px; }\n        .info-box { border: 2px solid #bdc3c7; border-radius: 8px; padding: 20px; margin: 20px 0; background-color: #ecf0f1; }\n        .footer { background-color: #34495e; color: white; padding: 15px; text-align: center; font-size: 12px; }\n    </style>\n</head>\n<body>\n    <div class=\"header\">\n        <h1>📧 Email Received</h1>\n    </div>\n    \n    <div class=\"content\">\n        <p>Dear {{ $json.customer_name }},</p>\n        \n        <p>Thank you for your email. I've received your message, but it doesn't appear to be a freight quote request.</p>\n        \n        <div class=\"info-box\">\n            <h2>📋 For freight quotes, please include:</h2>\n            <ul>\n                <li><strong>Origin Port (POL):</strong> e.g., INNSA, USLAX, DEHAM</li>\n                <li><strong>Destination Port (POD):</strong> e.g., NLRTM, USNYC, CNTSN</li>\n                <li><strong>Container Type:</strong> e.g., 20GP, 40GP, 40HC, 45HC</li>\n                <li><strong>Number of Containers:</strong> e.g., 1, 2, 5</li>\n            </ul>\n        </div>\n        \n        <p>If you need a freight quote, please reply with the required information and I'll generate it automatically!</p>\n        \n        <p>For other inquiries, please contact our sales team directly.</p>\n        \n        <p>Best regards,<br>\n        Your Freight Team</p>\n    </div>\n    \n    <div class=\"footer\">\n        <p>This is an automated response from our RMS system. For immediate assistance, please contact our sales team.</p>\n    </div>\n</body>\n</html>",
        "options": {}
      },
      "id": "send-not-quote-email",
      "name": "Send Not Quote Email",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2.1,
      "position": [680, 400]
    }
  ],
  "connections": {
    "Gmail IMAP Trigger": {
      "main": [
        [
          {
            "node": "Check: Is Quote Request?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check: Is Quote Request?": {
      "main": [
        [
          {
            "node": "Parse Email Content",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send Not Quote Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Email Content": {
      "main": [
        [
          {
            "node": "Validate: Complete Request?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate: Complete Request?": {
      "main": [
        [
          {
            "node": "Get JWT Token",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send Info Request Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get JWT Token": {
      "main": [
        [
          {
            "node": "Prepare Quote (V1 - Auto Preferred Rate)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Quote (V1 - Auto Preferred Rate)": {
      "main": [
        [
          {
            "node": "Check: Quote Generated?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check: Quote Generated?": {
      "main": [
        [
          {
            "node": "Format Quote Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Quote Data": {
      "main": [
        [
          {
            "node": "Get Salesforce Token",
            "type": "main",
            "index": 0
          },
          {
            "node": "Send Quote Email Reply",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Salesforce Token": {
      "main": [
        [
          {
            "node": "Update Salesforce Opportunity",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": ["gmail-imap", "email-quote", "salesforce", "v1-api", "auto-agent"],
  "triggerCount": 1,
  "updatedAt": "2025-10-16T10:00:00.000Z",
  "versionId": "1"
}
